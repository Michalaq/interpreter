-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, stderr, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)

import LexGramatyka
import ParGramatyka
import SkelGramatyka
import PrintGramatyka
import AbsGramatyka

import MyInterpreter

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: {-(Print a, Show a) =>-} Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = readFile f >>= run v p

run :: {-(Print a, Show a) =>-} Verbosity -> ParseFun Program -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed... // Zostawilem to, by ulatwic Panu ewentualne modyfikacje testow.\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do runProgram tree
                          exitSuccess


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree


main :: IO ()
main = do
  args <- getArgs
  case args of
    [] -> getContents >>= run 2 pProgram
    fs -> mapM_ (runFile 2 pProgram) fs
